# .NET Semantic Kernel Agents Workshop - API Test Collection
# 
# This HTTP file tests the .NET Semantic Kernel API implementation
# 
# Prerequisites:
# 1. Install VS Code REST Client extension
# 2. Start the .NET API: dotnet run
# 3. Ensure Azure OpenAI credentials are configured in .env
#
# Usage: Click "Send Request" above each ### section to test individual endpoints

@baseUrl = http://localhost:8000

### 1. Health Check
# Tests basic API connectivity and configuration status
GET {{baseUrl}}/health

### 2. Get Available Agents
# Returns list of all available agents with their capabilities
GET {{baseUrl}}/agents

### 3. Single Agent Chat - Generic Agent
# Test basic chat functionality with the generic agent
POST {{baseUrl}}/chat
Content-Type: application/json

{
  "message": "What are the best practices for building scalable .NET applications?",
  "agent": "generic_agent",
  "session_id": "test-session-001"
}

### 4. Single Agent Chat - People Lookup
# Test specialized people lookup agent
POST {{baseUrl}}/chat
Content-Type: application/json

{
  "message": "Can you help me find experts in machine learning?",
  "agent": "people_lookup",
  "session_id": "test-session-002"
}

### 5. Single Agent Chat - Knowledge Finder
# Test knowledge search and retrieval agent
POST {{baseUrl}}/chat
Content-Type: application/json

{
  "message": "What is the latest information about Semantic Kernel?",
  "agent": "knowledge_finder",
  "session_id": "test-session-003"
}

### 6. Multi-Agent Chat via /chat endpoint
# The /chat endpoint automatically routes to group chat when multiple agents are specified
POST {{baseUrl}}/chat
Content-Type: application/json

{
  "message": "How should we approach building an AI-powered application? Consider both technical and business perspectives.",
  "agents": ["generic_agent", "people_lookup"],
  "session_id": "test-session-004"
}

### 7. Group Chat with Semantic Kernel - Specified Agents
# Direct group chat endpoint with multiple specialized agents
POST {{baseUrl}}/group-chat
Content-Type: application/json

{
  "message": "What are the key considerations for enterprise AI deployment? Cover security, scalability, and team management.",
  "agents": ["generic_agent", "people_lookup", "knowledge_finder"],
  "session_id": "test-session-005",
  "max_turns": 2,
  "use_semantic_kernel_groupchat": true
}

### 8. Group Chat with Auto-Selected Agents
# Let the system automatically select the most relevant agents
POST {{baseUrl}}/group-chat
Content-Type: application/json

{
  "message": "Discuss the benefits and challenges of microservices architecture",
  "session_id": "test-session-006",
  "max_turns": 1
}

### 9. Group Chat - Complex Technical Question
# Test with a complex question requiring multiple expert perspectives
POST {{baseUrl}}/group-chat
Content-Type: application/json

{
  "message": "We're planning to migrate our monolithic application to a cloud-native architecture. What should we consider for team structure, technology choices, and implementation strategy?",
  "agents": ["generic_agent", "people_lookup", "knowledge_finder"],
  "session_id": "test-session-007",
  "max_turns": 3,
  "use_semantic_kernel_groupchat": true
}

### 10. Reset Session - Clear Conversation History
# Reset a specific session to clear conversation history
POST {{baseUrl}}/reset
Content-Type: application/json

{
  "session_id": "test-session-001"
}

### 11. Test Session Persistence
# Test that conversation history is maintained across requests
POST {{baseUrl}}/chat
Content-Type: application/json

{
  "message": "Remember this number: 42",
  "agent": "generic_agent",
  "session_id": "persistence-test"
}

### 12. Test Session Persistence - Follow-up
# This should reference the previous message in the same session
POST {{baseUrl}}/chat
Content-Type: application/json

{
  "message": "What number did I just tell you to remember?",
  "agent": "generic_agent",
  "session_id": "persistence-test"
}

### 13. Error Handling - Missing Message
# Test error handling with invalid request
POST {{baseUrl}}/chat
Content-Type: application/json

{
  "agent": "generic_agent",
  "session_id": "error-test"
}

### 14. Error Handling - Invalid Agent
# Test error handling with non-existent agent
POST {{baseUrl}}/chat
Content-Type: application/json

{
  "message": "Test message",
  "agent": "non_existent_agent",
  "session_id": "error-test-2"
}

###
# End of API Test Collection
# 
# Tips:
# - Use different session_ids to test session isolation
# - Check response metadata for performance metrics
# - Modify messages to test different scenarios
# - Use the Swagger UI at http://localhost:8000 for interactive documentation